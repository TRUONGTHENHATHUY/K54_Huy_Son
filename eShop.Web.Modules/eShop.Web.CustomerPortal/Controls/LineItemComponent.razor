@using System.Globalization;
@inject IDeleteProductUseCase deleteProductUseCase
@inject IUpdateQuantityUseCase updateQuantityUseCase

@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink"/>
        </div>
        
        <div class="col" style="color:white">
            <br/>
            <h5>@LineItem.Product.Name</h5>
            <div>
                Số lượng:&nbsp; <input style="background-color:#4f4f4f;color:white;height:25px;width:50px" type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
            </div>
            <br/>
            <div>
                Giá:&nbsp;&nbsp;@LineItem.Product.Price.ToString("c",culture)
            </div>
        </div>
        <div class="col" style="text-align:center;padding-top:20px">
           
            <MudButton Variant="Variant.Filled" Style="background-color:red;color:white;text-align:center;right:-70px" @onclick="@(() => DeleteProduct(LineItem.ProductId))">Xóa</MudButton>
        </div>
    </li>
}

@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct{ get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity{ get; set; }
    CultureInfo culture = new CultureInfo("vi-VN");
    async void HandleQuantityChange(ChangeEventArgs e)
    {
        if(e.Value == null || string.IsNullOrEmpty(e.Value.ToString())) return;
        int qty = 0;
        if (int.TryParse(e.Value.ToString(),out qty))
        {
            if (qty < 0) return;
            var order = await updateQuantityUseCase.Excute(LineItem.ProductId, qty);
            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    async void DeleteProduct(int productId)
    {
        var order = await deleteProductUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
