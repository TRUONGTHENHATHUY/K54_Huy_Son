@page "/cart"
@using eShop.UseCases.ShoppingCartScreenn.Interfaces;

@inject IViewShoppingCartUseCase viewShoppingCartUseCase

<div style="background-color:#31313C;height:100%;padding-top:35px;background-image:url(https://f3-zpc.zdn.vn/7702595158995916532/a386260eaf577f092646.jpg)">
    

    
@if(order!= null && order.LineItems != null && order.LineItems.Count > 0)
{
        <MudContainer Style="height:auto;width:948px;background-color:#31313c">
    <div class="row">
        <div class="col">
                    <br />
                    <br />
            <ul>
                @for (int i = 0; i < order.LineItems.Count; i++)
                {
                    <LineItemComponent 
                        LineItem="order.LineItems[i]"
                        OnDeleteProduct="HandleDeleteProduct"
                        OnUpdateQuantity="HandleUpdateQuantity"></LineItemComponent>

                    @if (i < order.LineItems.Count - 1)
                    {
                        <li style="list-style:none">
                            <hr />
                        </li>
                    }
                }
            </ul>
        </div>
        <div class="col">
            <br/>
                    <br />
            <OrderSummaryComponent order="order"></OrderSummaryComponent>
        </div>
    </div>
    </MudContainer>
}<br/>
        <br />
    
</div>

@code {
    private Order order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Excute();
            StateHasChanged();
        }
    }

    private void HandleDeleteProduct(Order order)
    {
        this.order = order;
    }
    private void HandleUpdateQuantity(Order order)
    {
        this.order = order;
    }
}
