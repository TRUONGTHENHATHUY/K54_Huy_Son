@page "/placeorder"
@using eShop.UseCases.ShoppingCartScreenn.Interfaces

@inject NavigationManager navigationManager
@inject IViewShoppingCartUseCase viewShoppingCartUseCase
@inject IPlaceOrderUseCase PlaceOrderUsecase
<div style="background-color:#31313C;padding-top:0;background-image:url(https://store.cloudflare.steamstatic.com/public/shared/images/joinsteam/new_login_bg_strong_mask.jpg)">
    <MudContainer Style="height:738px;width:1200px">
        <br/>
    <h3 style="color:white;text-align:center">THÔNG TIN MUA HÀNG</h3>
<br />

@if (order != null)
{
    <div class="row">
        <div class="col">
            <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmitted"></CustomerFormComponent>
        </div>
        <div class="col" style="top:-20px">
            <OrderSummaryComponent order="order" HidePlaceOrder="true"></OrderSummaryComponent>
        </div>
    </div>
}
</MudContainer>
</div>
@code {
    private Order order;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Excute();
            StateHasChanged();
        }
    }

    private async void HandleCustomerInfoSubmitted(CustomerViewModel customer)
    {
        var mapper = new AutoMapper.MapperConfiguration(cfg => cfg.CreateMap<CustomerViewModel, Order>()).CreateMapper();
        mapper.Map<CustomerViewModel, Order>(customer, order);

        var orderUniqueId = await PlaceOrderUsecase.Excute(order);

        if (string.IsNullOrEmpty(orderUniqueId))
        {
            //TODO: display error
        }
        else
        {
            navigationManager.NavigateTo($"orderconfirm/{orderUniqueId}");
        }
    }
}
